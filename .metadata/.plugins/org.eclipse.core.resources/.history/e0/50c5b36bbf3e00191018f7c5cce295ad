package Sorts;

import java.util.Comparator;

public class InsertionSort {
	
	public void sort(File[] a, Comparator<File> comparator) {
		int n = a.length;
		for(int i=0; i<n; i++) {
			for(int j=i; j>0; j--) {
				if(less(comparator,a[j],a[j-1]))
					exchange(a,j,j-1);
				else break;
			}
		}
		
		assert isSorted(a, 0, a.length-1);
	}
	
	//Implementation for MergeSort
	public void sort(Comparator<File> c, File[] a, int lo, int high) {
		int p = high;
		int q = lo;
		for(int i=q; i<=p; i++) {
			for(int j=i; j>lo; j--) {
				if(less(c,a[j],a[j-1]))
					exchange(a,j,j-1);
				else break;
			}
		}
	}
	
	private boolean isSorted(Comparator<File> c, File[] a, int lo, int high) {
		while(lo < high)
			if(!less(c,a[lo],a[++lo]))
				return false;
		return true;
	}
	
	private boolean less(Comparator<File> c, File a, File b) {
		return c.compare(a, b) <= 0;
	}
	
	private void exchange(Comparable<File>[] a, int i, int j) {
		Comparable<File> swap = a[i];
		a[i] = a[j];
		a[j] = swap;
	}
}
