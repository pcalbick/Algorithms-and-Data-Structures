import java.util.Random;

public class Percolation {
	private int[][] grid;
	private int[][][] id;
	
	public Percolation(int n) {
		grid = new int[n][n];
		id = new int[n][n][];
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; i++) {
				open(i,j);
				id[i][j] = new int[]{i,j};
			}
		}
		createConnections();
	}
	
	public void open(int row, int col) {
		if(row < 0 || row > grid.length || col < 0 || col > grid.length)
			throw new IllegalArgumentException();
		Random random = new Random(1);
		if(random.nextInt() == 1)
			grid[row][col] = 1;
	}
	
	public boolean isOpen(int row, int col) {
		if(row < 0 || row > grid.length || col < 0 || col > grid.length)
			throw new IllegalArgumentException();
		if(grid[row][col] == 1)
			return true;
		return false;
	}
	
	public boolean isFull(int row, int col) {
		if(row < 0 || row > grid.length || col < 0 || col > grid.length)
			throw new IllegalArgumentException();
		if(grid[row][col] == 0)
			return true;
		return false;
	}
	
	public int numberOfOpenSites() {
		int count = 0;
		for(int i=0; i<grid.length-1; i++) {
			for(int j=0; j<grid.length-1; i++) {
				if(grid[i][j] == 1)
					count++;
			}
		}
		return count;
	}
	
	public boolean percolates() {
		for(int i=0; i<grid.length; i++)
			for(int j=0; j<grid.length; j++)
				if(root(grid.length-1,j) == id[0][i])
					return true;
		return false;
	}
	
	public void createConnections() {
		for(int i=0; i<grid.length; i++) {
			for(int j=0; j<grid.length; j++) {
				if(isOpen(i,j)) {
					if(j-1 >= 0 && isOpen(i,j-1))
						union(i,j,i,j-1);
					if(j+1 < grid.length && isOpen(i,j+1))
						union(i,j,i,j+1);
					if(i+1 < grid.length && isOpen(i+1,j))
						union(i,j,i+1,j);
				}
			}
		}
	}
	
	public int[] root(int row, int col) {
		while(id[row][col][0] != row && id[row][col][1] != col) {
			row = id[row][col][0];
			col = id[row][col][1];
		}
		return id[row][col];
	}
	
	public void union(int row, int col, int row2, int col2) {
		int[] p = root(row,col);
		int[] q = root(row2,col2);
		id[p[0]][p[1]] = q;
	}
}
